name: CI
on: [push]
jobs:

  flang-nightly-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.11]
        toolchain:
          - {compiler: gcc, version: 13}
        include:
          - os: ubuntu-latest
            toolchain: {compiler: gcc, version: 13}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6
        with:
          submodules: recursive
      # - name: Setup Fortran Package Manager
      #   uses: fortran-lang/setup-fpm@v5
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      # - run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)
      # - run: fpm run --compiler flang-new
      # - run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh); which flang-new; fpm run --compiler flang-new"

      - run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      # LLVM
      - run: sudo apt-get install libllvm-19-ocaml-dev libllvm19 llvm-19 llvm-19-dev llvm-19-doc llvm-19-examples llvm-19-runtime
      # Clang and co
      - run: sudo apt-get install clang-19 clang-tools-19 clang-19-doc libclang-common-19-dev libclang-19-dev libclang1-19 clang-format-19 python3-clang-19 clangd-19 clang-tidy-19
      # compiler-rt
      - run: sudo apt-get install libclang-rt-19-dev
      # polly
      - run: sudo apt-get install libpolly-19-dev
      # libfuzzer
      - run: sudo apt-get install libfuzzer-19-dev
      # lldb
      - run: sudo apt-get install lldb-19
      # lld (linker)
      - run: sudo apt-get install lld-19
      # libc++
      - run: sudo apt-get install libc++-19-dev libc++abi-19-dev
      # OpenMP
      - run: sudo apt-get install libomp-19-dev
      # libclc
      - run: sudo apt-get install libclc-19-dev
      # libunwind
      - run: sudo apt-get install libunwind-19-dev
      # mlir
      - run: sudo apt-get install libmlir-19-dev mlir-19-tools
      # bolt
      - run: sudo apt-get install libbolt-19-dev bolt-19
      # flang
      - run: sudo apt-get install flang-19
      # wasm support
      - run: sudo apt-get install libclang-rt-19-dev-wasm32 libclang-rt-19-dev-wasm64 libc++-19-dev-wasm32 libc++abi-19-dev-wasm32 libclang-rt-19-dev-wasm32 libclang-rt-19-dev-wasm64
      # LLVM libc
      - run: sudo apt-get install libllvmlibc-19-dev

      - run: which flang-new
      - run: flang-new --version

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        python-version: [3.11]
        toolchain:
          - {compiler: gcc, version: 13}
          # - {compiler: intel, version: '2023.2'}
          # - {compiler: intel-classic, version: '2021.10'}
          # - {compiler: nvidia-hpc, version: '23.11'}
        include:
          - os: ubuntu-latest
            toolchain: {compiler: gcc, version: 13}
        # exclude:
        #   - os: macos-latest
        #     toolchain: {compiler: intel, version: '2023.2'}
        #   - os: macos-latest
        #     toolchain: {compiler: nvidia-hpc, version: '23.11'}
        #   - os: windows-latest
        #     toolchain: {compiler: nvidia-hpc, version: '23.11'}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6
        with:
          submodules: recursive

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3.0.4
        with:
          #auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      # - name: Setup Fortran Package Manager
      #   uses: fortran-lang/setup-fpm@v5
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      # - uses: fortran-lang/setup-fortran@v1.6.1
      #   id: setup-fortran
      #   with:
      #     compiler: ${{ matrix.toolchain.compiler }}
      #     version: ${{ matrix.toolchain.version }}

      - run: conda info
      - run: conda list
      - run: conda config --show
      - run: conda create -c conda-forge -c nodefaults fpm flang --prefix ./env
      # this works:
      # for some reason it's not setting @rpath for the runtime dependencies?? Just update LD_LIBRARY_PATH manually here
      # - run: conda activate ./env; fpm build --compiler flang-new; ldd ./build/flang-new_*/app/test; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./env/lib; fpm run --compiler flang-new
      - run: conda activate ./env; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./env/lib; fpm run --compiler flang-new
      # doesn't work .. unknown argument ..
      # - run: conda activate ./env; fpm run --compiler flang-new --flag "-frtlib-add-rpath"
